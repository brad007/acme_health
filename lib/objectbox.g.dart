// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'infrastructure/questionnaire/dtos/questionnaire_dto.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 5776513658503119336),
      name: 'QuestionnaireDTO',
      lastPropertyId: const obx_int.IdUid(13, 3947717711740582918),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6632905835962365322),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5349302978972900158),
            name: 'gender',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 494049284747202926),
            name: 'exerciseFrequency',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 9143601751946130492),
            name: 'isSmoking',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7060515495677610154),
            name: 'sleepDuration',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2033645248198517846),
            name: 'height',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 7177731360316256332),
            name: 'weight',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 5552134053540323006),
            name: 'chronicIllness',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 3471177367132144944),
            name: 'healthRating',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 8546171284696043197),
            name: 'dietaryRestrictions',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 4922659886570029891),
            name: 'alcoholConsumption',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 686690169903621758),
            name: 'stress',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 3947717711740582918),
            name: 'age',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(3, 5776513658503119336),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [5224874209448417396, 3313283345418005554],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        8080977106039348917,
        8543996204794018846,
        7804775792506401490,
        778258599351484976,
        6578955559627437560,
        8574913432800160069
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    QuestionnaireDTO: obx_int.EntityDefinition<QuestionnaireDTO>(
        model: _entities[0],
        toOneRelations: (QuestionnaireDTO object) => [],
        toManyRelations: (QuestionnaireDTO object) => {},
        getId: (QuestionnaireDTO object) => object.id,
        setId: (QuestionnaireDTO object, int id) {
          object.id = id;
        },
        objectToFB: (QuestionnaireDTO object, fb.Builder fbb) {
          final genderOffset =
              object.gender == null ? null : fbb.writeString(object.gender!);
          final exerciseFrequencyOffset = object.exerciseFrequency == null
              ? null
              : fbb.writeString(object.exerciseFrequency!);
          final chronicIllnessOffset = object.chronicIllness == null
              ? null
              : fbb.writeString(object.chronicIllness!);
          final dietaryRestrictionsOffset = object.dietaryRestrictions == null
              ? null
              : fbb.writeList(object.dietaryRestrictions!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final alcoholConsumptionOffset = object.alcoholConsumption == null
              ? null
              : fbb.writeString(object.alcoholConsumption!);
          final stressOffset =
              object.stress == null ? null : fbb.writeString(object.stress!);
          fbb.startTable(14);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, genderOffset);
          fbb.addOffset(2, exerciseFrequencyOffset);
          fbb.addBool(3, object.isSmoking);
          fbb.addInt64(4, object.sleepDuration);
          fbb.addFloat64(5, object.height);
          fbb.addFloat64(6, object.weight);
          fbb.addOffset(7, chronicIllnessOffset);
          fbb.addInt64(8, object.healthRating);
          fbb.addOffset(9, dietaryRestrictionsOffset);
          fbb.addOffset(10, alcoholConsumptionOffset);
          fbb.addOffset(11, stressOffset);
          fbb.addInt64(12, object.age);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final ageParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 28);
          final genderParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final exerciseFrequencyParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8);
          final isSmokingParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 10);
          final sleepDurationParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final heightParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 14);
          final weightParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 16);
          final chronicIllnessParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final healthRatingParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final dietaryRestrictionsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 22);
          final alcoholConsumptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 24);
          final stressParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 26);
          final object = QuestionnaireDTO(
              id: idParam,
              age: ageParam,
              gender: genderParam,
              exerciseFrequency: exerciseFrequencyParam,
              isSmoking: isSmokingParam,
              sleepDuration: sleepDurationParam,
              height: heightParam,
              weight: weightParam,
              chronicIllness: chronicIllnessParam,
              healthRating: healthRatingParam,
              dietaryRestrictions: dietaryRestrictionsParam,
              alcoholConsumption: alcoholConsumptionParam,
              stress: stressParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [QuestionnaireDTO] entity fields to define ObjectBox queries.
class QuestionnaireDTO_ {
  /// See [QuestionnaireDTO.id].
  static final id =
      obx.QueryIntegerProperty<QuestionnaireDTO>(_entities[0].properties[0]);

  /// See [QuestionnaireDTO.gender].
  static final gender =
      obx.QueryStringProperty<QuestionnaireDTO>(_entities[0].properties[1]);

  /// See [QuestionnaireDTO.exerciseFrequency].
  static final exerciseFrequency =
      obx.QueryStringProperty<QuestionnaireDTO>(_entities[0].properties[2]);

  /// See [QuestionnaireDTO.isSmoking].
  static final isSmoking =
      obx.QueryBooleanProperty<QuestionnaireDTO>(_entities[0].properties[3]);

  /// See [QuestionnaireDTO.sleepDuration].
  static final sleepDuration =
      obx.QueryIntegerProperty<QuestionnaireDTO>(_entities[0].properties[4]);

  /// See [QuestionnaireDTO.height].
  static final height =
      obx.QueryDoubleProperty<QuestionnaireDTO>(_entities[0].properties[5]);

  /// See [QuestionnaireDTO.weight].
  static final weight =
      obx.QueryDoubleProperty<QuestionnaireDTO>(_entities[0].properties[6]);

  /// See [QuestionnaireDTO.chronicIllness].
  static final chronicIllness =
      obx.QueryStringProperty<QuestionnaireDTO>(_entities[0].properties[7]);

  /// See [QuestionnaireDTO.healthRating].
  static final healthRating =
      obx.QueryIntegerProperty<QuestionnaireDTO>(_entities[0].properties[8]);

  /// See [QuestionnaireDTO.dietaryRestrictions].
  static final dietaryRestrictions =
      obx.QueryStringVectorProperty<QuestionnaireDTO>(
          _entities[0].properties[9]);

  /// See [QuestionnaireDTO.alcoholConsumption].
  static final alcoholConsumption =
      obx.QueryStringProperty<QuestionnaireDTO>(_entities[0].properties[10]);

  /// See [QuestionnaireDTO.stress].
  static final stress =
      obx.QueryStringProperty<QuestionnaireDTO>(_entities[0].properties[11]);

  /// See [QuestionnaireDTO.age].
  static final age =
      obx.QueryIntegerProperty<QuestionnaireDTO>(_entities[0].properties[12]);
}
